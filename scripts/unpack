#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2012 Stephan Raue (stephan@openelec.tv)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.tv; see the file COPYING.  If not, write to
#  the Free Software Foundation, 51 Franklin Street, Suite 500, Boston, MA 02110, USA.
#  http://www.gnu.org/copyleft/gpl.html
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name"
  exit 1
fi

$SCRIPTS/get $1

STAMP=$PKG_BUILD/.openelec-unpack

mkdir -p $BUILD

[ ! -d "$SOURCES/$1" -a ! -d "$PKG_DIR/sources" ] && exit 0

for i in $BUILD/$1-*; do
  if [ -d $i -a -f "$i/.openelec-unpack" ] ; then
    . "$i/.openelec-unpack"
    if [ "$STAMP_PKG_NAME" = "$1" ]; then
      # trigger unpack / full rebuild on any package.mk change
      if [ -f $PKG_DIR/package.mk -a $PKG_DIR/package.mk -nt "$i/.openelec-unpack" ]; then
        CLEAN_SOURCE=yes
        break
      # TODO: remove after converting ALL packages
      elif [ -f $PKG_DIR/meta -a $PKG_DIR/meta -nt "$i/.openelec-unpack" ]; then
        CLEAN_SOURCE=yes
        break
      fi
      # handle $PKG_NEED_UNPACK
      for file in $PKG_NEED_UNPACK; do
        if [ -f "$file" -a "$file" -nt "$i/.openelec-unpack" ] ; then
          CLEAN_SOURCE=yes
          break
        fi
      done
      # trigger unpack / full rebuild on any patch / script / etc.. change
      # TODO: rewwork $PKG_DIR/scripts -> $PKG_DIR/filesystem/....
      for file in $PKG_DIR/{patches,patches.upstream,scripts}/* ; do
        if [ -f "$file" -a "$file" -nt "$i/.openelec-unpack" ]; then
          CLEAN_SOURCE=yes
          break
        fi
      done
    fi
  fi
done

if [ "$CLEAN_SOURCE" = "yes" ]; then
  $SCRIPTS/clean $1
fi

[ -f "$STAMP" ] && exit 0

printf "%${BUILD_INDENT}c ${boldcyan}UNPACK${endcolor}   $1\n" ' '>&$SILENT_OUT
export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

if [ -n "$PKG_URL" ]; then
  $SCRIPTS/extract $1 "$1*.tar.bz2" $BUILD
  $SCRIPTS/extract $1 "$1*.tbz"     $BUILD
  $SCRIPTS/extract $1 "$1*.tar.gz"  $BUILD
  $SCRIPTS/extract $1 "$1*.tar.xz"  $BUILD
  $SCRIPTS/extract $1 "$1*.txz"     $BUILD
  $SCRIPTS/extract $1 "$1*.tgz"     $BUILD
  $SCRIPTS/extract $1 "$1*.7z"      $BUILD
fi

if [ -n "$PKG_SOURCE_DIR" ]; then
  mv $BUILD/$PKG_SOURCE_DIR $BUILD/$PKG_NAME-$PKG_VERSION
fi

if [ -d "$PKG_DIR/sources" ]; then
  [ ! -d "$BUILD/${PKG_NAME}-${PKG_VERSION}" ] && mkdir -p $BUILD/${PKG_NAME}-${PKG_VERSION}
  cp -PRf $PKG_DIR/sources/* $BUILD/${PKG_NAME}-${PKG_VERSION}
fi

for i in $PKG_DIR/patches/$PKG_NAME-*.patch ; do
  if [ -f "$i" ]; then
    PATCH=`basename $i`
    PT=`echo $PATCH | sed 's/.*\.\(.*\)$/\1/'`
    if [ "$PT" != "patch" -a "$PT" != "$TARGET_ARCH" ]; then
      printf "%${BUILD_INDENT}c ${boldyellow}SKIP PATCH${endcolor} ${boldwhite}(common)${endcolor}   $i\n" ' '>&$SILENT_OUT
      continue;
    else
      printf "%${BUILD_INDENT}c ${boldgreen}APPLY PATCH${endcolor} ${boldwhite}(common)${endcolor}   $i\n" ' '>&$SILENT_OUT
      cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
    fi
  fi
done

for i in $PKG_DIR/patches/$PKG_VERSION/*.patch ; do
  if [ -f "$i" ]; then
    PATCH=`basename $i`
    PT=`echo $PATCH | sed 's/.*\.\(.*\)$/\1/'`
    if [ "$PT" != "patch" -a "$PT" != "$TARGET_ARCH" ]; then
      printf "%${BUILD_INDENT}c ${boldyellow}SKIP PATCH${endcolor} ${boldwhite}($PKG_VERSION)${endcolor}   $i\n" ' '>&$SILENT_OUT
      continue;
    else
      printf "%${BUILD_INDENT}c ${boldgreen}APPLY PATCH${endcolor} ${boldwhite}($PKG_VERSION)${endcolor}   $i\n" ' '>&$SILENT_OUT
      cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
    fi
  fi
done

for i in $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/*.patch ; do
  if [ -f "$i" ]; then
    PATCH=`basename $i`
    PT=`echo $PATCH | sed 's/.*\.\(.*\)$/\1/'`
    if [ "$PT" != "patch" -a "$PT" != "$TARGET_ARCH" ]; then
      printf "%${BUILD_INDENT}c ${boldyellow}SKIP PATCH${endcolor} ${boldwhite}(project)${endcolor}   $i\n" ' '>&$SILENT_OUT
      continue;
    else
      printf "%${BUILD_INDENT}c ${boldgreen}APPLY PATCH${endcolor} ${boldwhite}(project)${endcolor}   $i\n" ' '>&$SILENT_OUT
      cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
    fi
  fi
done

# post_unpack() :
# - Formerly used to replace $PKG_DIR/rename
# - now replaced by $PKG_SOURCE_DIR .
# - now moved after patching to replace the formerly 'unpack' script
if [ -f $PKG_DIR/package.mk ]; then
  # unset functions
  unset -f post_unpack

  . $PKG_DIR/package.mk

  if [ "$(type -t post_unpack)" = "function" ]; then
    post_unpack
  fi
fi

# todo: deprecated
[ -f "$PKG_DIR/unpack" ] && $PKG_DIR/unpack $@ >&$VERBOSE_OUT

for config in `find $BUILD/$1* -name config.guess | sed 's/config.guess//'`; do
  printf "%${BUILD_INDENT}c ${boldyellow}FIXCONFIG${endcolor}   $config\n" ' '>&$SILENT_OUT

  [ -f "$config/config.guess" ] && cp -f $SCRIPTS/configtools/config.guess $config
  [ -f "$config/config.sub" ] && cp -f $SCRIPTS/configtools/config.sub $config
  [ -f "$config/configure.guess" ] && cp -f $SCRIPTS/configtools/config.guess $config/configure.guess
  [ -f "$config/configure.sub" ] && cp -f $SCRIPTS/configtools/config.sub $config/configure.sub
done

rm -f $STAMPS/$1/build_*

if [ -f "$PKG_DIR/package.mk" ]; then
  . $PKG_DIR/package.mk

  for i in PKG_NAME PKG_VERSION PKG_REV PKG_SHORTDESC PKG_LONGDESC PKG_SITE PKG_URL PKG_SECTION; do
    eval val=\$$i
    echo "STAMP_$i=\"$val"\" >> $STAMP
  done
elif [ -f "$PKG_DIR/meta" ]; then
  # Deprecated
  . $PKG_DIR/meta

  for i in PKG_NAME PKG_VERSION PKG_REV PKG_SHORTDESC PKG_LONGDESC PKG_SITE PKG_URL PKG_SECTION; do
    eval val=\$$i
    echo "STAMP_$i=\"$val"\" >> $STAMP
  done
else
  # Deprecated
  for i in `sed -n "s/^\([^#].*\)=\".*$/\1/p" $PROJECT_DIR/$PROJECT/options | grep -v "#"`; do
    eval val=\$$i
    echo "STAMP_$i=\"$val"\" >> $STAMP
  done
fi
