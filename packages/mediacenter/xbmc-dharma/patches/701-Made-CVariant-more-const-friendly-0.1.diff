diff -Naur xbmc-dharma-35100/xbmc/utils/Variant.cpp xbmc-dharma-35100.patch/xbmc/utils/Variant.cpp
--- xbmc-dharma-35100/xbmc/utils/Variant.cpp	2010-10-30 05:38:22.000000000 +0200
+++ xbmc-dharma-35100.patch/xbmc/utils/Variant.cpp	2010-11-01 21:11:23.929841377 +0100
@@ -19,7 +19,6 @@
  *
  */
 #include "Variant.h"
-#include "PlatformDefs.h"
 #include <string.h>
 
 using namespace std;
@@ -182,6 +181,14 @@
     return ConstNullVariant;
 }
 
+const CVariant &CVariant::operator[](std::string key) const
+{
+  if (isObject())
+    return (*m_data.map)[key];
+  else
+    return ConstNullVariant;
+}
+
 CVariant &CVariant::operator[](unsigned int position)
 {
   if (isArray() && size() > position)
@@ -190,6 +197,14 @@
     return ConstNullVariant;
 }
 
+const CVariant &CVariant::operator[](unsigned int position) const
+{
+  if (isArray() && size() > position)
+    return (*m_data.array)[position];
+  else
+    return ConstNullVariant;
+}
+
 CVariant &CVariant::operator=(const CVariant &rhs)
 {
   if (m_type == VariantTypeConstNull)
@@ -289,21 +304,21 @@
 
 #include <stdio.h>
 
-void CVariant::debug()
+void CVariant::debug() const
 {
   internaldebug();
   printf("\n");
 }
 
-void CVariant::internaldebug()
+void CVariant::internaldebug() const
 {
   switch (m_type)
   {
   case VariantTypeInteger:
-    printf("int: %"PRIu64"", m_data.integer);
+    printf("int: %lld", (long long int)m_data.integer);
     break;
   case VariantTypeUnsignedInteger:
-    printf("uint: %"PRIu64"", m_data.unsignedinteger);
+    printf("uint: %lld", (long long int)m_data.unsignedinteger);
     break;
   case VariantTypeBoolean:
     printf("bool: %s", m_data.boolean ? "true" : "false");
diff -Naur xbmc-dharma-35100/xbmc/utils/Variant.h xbmc-dharma-35100.patch/xbmc/utils/Variant.h
--- xbmc-dharma-35100/xbmc/utils/Variant.h	2010-10-30 05:38:21.000000000 +0200
+++ xbmc-dharma-35100.patch/xbmc/utils/Variant.h	2010-11-01 21:11:23.929841377 +0100
@@ -64,7 +64,9 @@
   const char *asString(const char *fallback = "") const;
 
   CVariant &operator[](std::string key);
+  const CVariant &operator[](std::string key) const;
   CVariant &operator[](unsigned int position);
+  const CVariant &operator[](unsigned int position) const;
 
   CVariant &operator=(const CVariant &rhs);
 
@@ -76,8 +78,8 @@
   void erase(std::string key);
   void erase(unsigned int position);
 
-  void debug();
-  void internaldebug();
+  void debug() const;
+  void internaldebug() const;
 private:
   VariantType m_type;
 
