From 295930bdb8091b7a1e81f6f0558ff537a78b1ea3 Mon Sep 17 00:00:00 2001
From: Jim Carroll <thecarrolls@jiminger.com>
Date: Fri, 10 Jun 2011 06:59:20 -0400
Subject: [PATCH] Fixed a problem where a python error in one callback method
 can effect the execution of subsequent callbacks as the
 error state in the interpreter wasn't being cleared.

---
 xbmc/interfaces/python/xbmcmodule/pyutil.cpp |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/xbmc/interfaces/python/xbmcmodule/pyutil.cpp b/xbmc/interfaces/python/xbmcmodule/pyutil.cpp
index c7d2892..1284de5 100644
--- a/xbmc/interfaces/python/xbmcmodule/pyutil.cpp
+++ b/xbmc/interfaces/python/xbmcmodule/pyutil.cpp
@@ -24,6 +24,7 @@
 #include <wchar.h>
 #include <vector>
 #include "addons/Skin.h"
+#include "utils/log.h"
 #include "tinyXML/tinyxml.h"
 #include "utils/CharsetConverter.h"
 #include "threads/CriticalSection.h"
@@ -197,7 +198,22 @@ void _PyXBMC_MakePendingCalls()
     g_callQueue.erase(iter);
     lock.Leave();
     if (p.func)
+    {
       p.func(p.args);
+
+      // Since the callback is likely to make it into python, and since
+      // not all of the callback functions handle errors, the error state
+      // may remain set from the previous call. As a result subsequent calls
+      // to callback functions exhibit odd behavior difficult to debug.
+      if (PyErr_Occurred())
+      {
+        CLog::Log(LOGERROR,"Exception in python script callback execution");
+
+        // This clears the python error state and prints it to the log
+        PyErr_Print();
+      }
+
+    }
     //(*((*iter).first))((*iter).second);
     lock.Enter();
     iter = g_callQueue.begin();
-- 
1.7.5.4

