diff -Naur uClibc-0.9.30.1/libc/stdlib/Makefile.in uClibc-0.9.30.1.patch/libc/stdlib/Makefile.in
--- uClibc-0.9.30.1/libc/stdlib/Makefile.in	2008-11-07 22:15:53.000000000 +0100
+++ uClibc-0.9.30.1.patch/libc/stdlib/Makefile.in	2009-09-26 21:02:10.972572307 +0200
@@ -14,7 +14,7 @@
 	rand.c random.c random_r.c setenv.c system.c div.c ldiv.c lldiv.c \
 	getpt.c drand48-iter.c jrand48.c \
 	jrand48_r.c lrand48.c lrand48_r.c mrand48.c mrand48_r.c nrand48.c \
-	nrand48_r.c rand_r.c srand48.c srand48_r.c seed48.c seed48_r.c \
+	nrand48_r.c rand_r.c rpmatch.c srand48.c srand48_r.c seed48.c seed48_r.c \
 	valloc.c a64l.c l64a.c __uc_malloc.c
 ifeq ($(UCLIBC_HAS_ADVANCED_REALTIME),y)
 CSRC += posix_memalign.c
diff -Naur uClibc-0.9.30.1/libc/stdlib/rpmatch.c uClibc-0.9.30.1.patch/libc/stdlib/rpmatch.c
--- uClibc-0.9.30.1/libc/stdlib/rpmatch.c	1970-01-01 01:00:00.000000000 +0100
+++ uClibc-0.9.30.1.patch/libc/stdlib/rpmatch.c	2003-06-12 00:12:19.000000000 +0200
@@ -0,0 +1,64 @@
+/* Determine whether string value is affirmation or negative response
+   according to current locale's data.
+   This file is part of the GNU C Library.
+   Copyright (C) 1996, 1997, 2000, 2003 Free Software Foundation, Inc.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <langinfo.h>
+#include <stdlib.h>
+#include <regex.h>
+
+
+int
+rpmatch (response)
+     const char *response;
+{
+  /* Match against one of the response patterns, compiling the pattern
+     first if necessary.  */
+  auto int try (const int tag, const int match, const int nomatch,
+		const char **lastp, regex_t *re);
+
+  int try (const int tag, const int match, const int nomatch,
+	   const char **lastp, regex_t *re)
+    {
+      const char *pattern = nl_langinfo (tag);
+      if (pattern != *lastp)
+	{
+	  /* The pattern has changed.  */
+	  if (*lastp)
+	    {
+	      /* Free the old compiled pattern.  */
+	      __regfree (re);
+	      *lastp = NULL;
+	    }
+	  /* Compile the pattern and cache it for future runs.  */
+	  if (__regcomp (re, pattern, REG_EXTENDED) != 0)
+	    return -1;
+	  *lastp = pattern;
+	}
+
+      /* Try the pattern.  */
+      return __regexec (re, response, 0, NULL, 0) == 0 ? match : nomatch;
+    }
+
+  /* We cache the response patterns and compiled regexps here.  */
+  static const char *yesexpr, *noexpr;
+  static regex_t yesre, nore;
+
+  return (try (YESEXPR, 1, 0, &yesexpr, &yesre) ?:
+	  try (NOEXPR, 0, -1, &noexpr, &nore));
+}
