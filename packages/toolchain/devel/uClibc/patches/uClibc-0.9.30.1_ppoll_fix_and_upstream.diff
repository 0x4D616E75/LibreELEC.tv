diff -Naur uClibc-0.9.30.1/libc/sysdeps/linux/common/ppoll.c uClibc-0.9.30.1.patch/libc/sysdeps/linux/common/ppoll.c
--- uClibc-0.9.30.1/libc/sysdeps/linux/common/ppoll.c	2008-10-24 10:34:31.000000000 +0200
+++ uClibc-0.9.30.1.patch/libc/sysdeps/linux/common/ppoll.c	2009-08-15 18:32:11.166479655 +0200
@@ -17,6 +17,7 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
+#include <signal.h>
 #include <sys/syscall.h>
 #include <sys/poll.h>
 
@@ -24,26 +25,19 @@
 
 libc_hidden_proto(ppoll)
 
-# define __NR___libc_ppoll __NR_ppoll
-static __always_inline
-_syscall4(int, __libc_ppoll, struct pollfd *, fds,
-	nfds_t, nfds, const struct timespec *, timeout,
-	const __sigset_t *, sigmask)
-
 int
-ppoll (struct pollfd *fds, nfds_t nfds, const struct timespec *timeout,
-       const __sigset_t *sigmask)
+ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *timeout,
+       const sigset_t *sigmask)
 {
-  /* The Linux kernel can in some situations update the timeout value.
-     We do not want that so use a local variable.  */
-  struct timespec tval;
-  if (timeout != NULL)
-    {
-      tval = *timeout;
-      timeout = &tval;
-    }
+	/* The Linux kernel can in some situations update the timeout value.
+	   We do not want that so use a local variable.  */
+	struct timespec tval;
+	if (timeout != NULL) {
+		tval = *timeout;
+		timeout = &tval;
+	}
 
-  return __libc_ppoll(fds, nfds, timeout, sigmask);
+	return INLINE_SYSCALL(ppoll, 5, fds, nfds, timeout, sigmask, _NSIG / 8);
 }
 libc_hidden_def(ppoll)
 
